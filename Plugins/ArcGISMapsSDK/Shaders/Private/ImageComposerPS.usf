#include "/Engine/Private/Common.ush"
#include "/Engine/Private/GammaCorrectionCommon.ush"

// Vertex shader

void ImageComposerVS(
	in float4 InPosition : ATTRIBUTE0,
	in float2 InUV : ATTRIBUTE1,
	out float4 OutPosition : SV_POSITION,
	out float2 OutUV : TEXCOORD0)
{
	OutPosition = InPosition;
	OutUV = InUV;
}

// Pixel shader

uint NumTextures;

SamplerState Samplers_0;
SamplerState Samplers_1;
SamplerState Samplers_2;
SamplerState Samplers_3;
SamplerState Samplers_4;
SamplerState Samplers_5;
SamplerState Samplers_6;
SamplerState Samplers_7;

Texture2D Textures_0;
Texture2D Textures_1;
Texture2D Textures_2;
Texture2D Textures_3;
Texture2D Textures_4;
Texture2D Textures_5;
Texture2D Textures_6;
Texture2D Textures_7;

float4 OffsetScaleOpacity[8];

#define SAMPLE_AND_BLEND(num) \
	if (num < NumTextures)																												\
	{																																	\
		texSample = Textures_##num.SampleLevel(Samplers_##num, InUV.xy * OffsetScaleOpacity[num].z + OffsetScaleOpacity[num].xy, 0);	\
		texSample = float4(LinearToSrgb(texSample.xyz), texSample.w);																	\
		texSample *= OffsetScaleOpacity[num].w;																							\
		output = output * (1 - texSample.w) + texSample;																				\
	}

void ImageComposerPS(
	float4 InPosition : SV_POSITION,
	float2 InUV : TEXCOORD0,
	out float4 OutColor : SV_Target0)
{
	float4 output = 1.0f;
	float4 texSample = 0.0f;

	SAMPLE_AND_BLEND(0);
	SAMPLE_AND_BLEND(1);
	SAMPLE_AND_BLEND(2);
	SAMPLE_AND_BLEND(3);
	SAMPLE_AND_BLEND(4);
	SAMPLE_AND_BLEND(5);
	SAMPLE_AND_BLEND(6);
	SAMPLE_AND_BLEND(7);

	OutColor = float4(sRGBToLinear(output.xyz), output.w);
}
